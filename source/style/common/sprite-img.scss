// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$clear-name: 'clear';
$clear-x: 71px;
$clear-y: 0px;
$clear-offset-x: -71px;
$clear-offset-y: 0px;
$clear-width: 12px;
$clear-height: 12px;
$clear-total-width: 83px;
$clear-total-height: 58px;
$clear-image: '../images/sprite-img.png';
$clear: (71px, 0px, -71px, 0px, 12px, 12px, 83px, 58px, '../images/sprite-img.png', 'clear', );
$interest-name: 'interest';
$interest-x: 0px;
$interest-y: 42px;
$interest-offset-x: 0px;
$interest-offset-y: -42px;
$interest-width: 17px;
$interest-height: 16px;
$interest-total-width: 83px;
$interest-total-height: 58px;
$interest-image: '../images/sprite-img.png';
$interest: (0px, 42px, 0px, -42px, 17px, 16px, 83px, 58px, '../images/sprite-img.png', 'interest', );
$payment-name: 'payment';
$payment-x: 22px;
$payment-y: 42px;
$payment-offset-x: -22px;
$payment-offset-y: -42px;
$payment-width: 16px;
$payment-height: 16px;
$payment-total-width: 83px;
$payment-total-height: 58px;
$payment-image: '../images/sprite-img.png';
$payment: (22px, 42px, -22px, -42px, 16px, 16px, 83px, 58px, '../images/sprite-img.png', 'payment', );
$phone-name: 'phone';
$phone-x: 0px;
$phone-y: 0px;
$phone-offset-x: 0px;
$phone-offset-y: 0px;
$phone-width: 36px;
$phone-height: 37px;
$phone-total-width: 83px;
$phone-total-height: 58px;
$phone-image: '../images/sprite-img.png';
$phone: (0px, 0px, 0px, 0px, 36px, 37px, 83px, 58px, '../images/sprite-img.png', 'phone', );
$traidin-name: 'traidin';
$traidin-x: 43px;
$traidin-y: 42px;
$traidin-offset-x: -43px;
$traidin-offset-y: -42px;
$traidin-width: 17px;
$traidin-height: 13px;
$traidin-total-width: 83px;
$traidin-total-height: 58px;
$traidin-image: '../images/sprite-img.png';
$traidin: (43px, 42px, -43px, -42px, 17px, 13px, 83px, 58px, '../images/sprite-img.png', 'traidin', );
$up-name: 'up';
$up-x: 41px;
$up-y: 0px;
$up-offset-x: -41px;
$up-offset-y: 0px;
$up-width: 25px;
$up-height: 30px;
$up-total-width: 83px;
$up-total-height: 58px;
$up-image: '../images/sprite-img.png';
$up: (41px, 0px, -41px, 0px, 25px, 30px, 83px, 58px, '../images/sprite-img.png', 'up', );
$clear-2x-name: 'clear@2x';
$clear-2x-x: 142px;
$clear-2x-y: 0px;
$clear-2x-offset-x: -142px;
$clear-2x-offset-y: 0px;
$clear-2x-width: 24px;
$clear-2x-height: 24px;
$clear-2x-total-width: 166px;
$clear-2x-total-height: 116px;
$clear-2x-image: '../images/sprite-img@2x.png';
$clear-2x: (142px, 0px, -142px, 0px, 24px, 24px, 166px, 116px, '../images/sprite-img@2x.png', 'clear@2x', );
$interest-2x-name: 'interest@2x';
$interest-2x-x: 0px;
$interest-2x-y: 84px;
$interest-2x-offset-x: 0px;
$interest-2x-offset-y: -84px;
$interest-2x-width: 34px;
$interest-2x-height: 32px;
$interest-2x-total-width: 166px;
$interest-2x-total-height: 116px;
$interest-2x-image: '../images/sprite-img@2x.png';
$interest-2x: (0px, 84px, 0px, -84px, 34px, 32px, 166px, 116px, '../images/sprite-img@2x.png', 'interest@2x', );
$payment-2x-name: 'payment@2x';
$payment-2x-x: 44px;
$payment-2x-y: 84px;
$payment-2x-offset-x: -44px;
$payment-2x-offset-y: -84px;
$payment-2x-width: 32px;
$payment-2x-height: 32px;
$payment-2x-total-width: 166px;
$payment-2x-total-height: 116px;
$payment-2x-image: '../images/sprite-img@2x.png';
$payment-2x: (44px, 84px, -44px, -84px, 32px, 32px, 166px, 116px, '../images/sprite-img@2x.png', 'payment@2x', );
$phone-2x-name: 'phone@2x';
$phone-2x-x: 0px;
$phone-2x-y: 0px;
$phone-2x-offset-x: 0px;
$phone-2x-offset-y: 0px;
$phone-2x-width: 72px;
$phone-2x-height: 74px;
$phone-2x-total-width: 166px;
$phone-2x-total-height: 116px;
$phone-2x-image: '../images/sprite-img@2x.png';
$phone-2x: (0px, 0px, 0px, 0px, 72px, 74px, 166px, 116px, '../images/sprite-img@2x.png', 'phone@2x', );
$traidin-2x-name: 'traidin@2x';
$traidin-2x-x: 86px;
$traidin-2x-y: 84px;
$traidin-2x-offset-x: -86px;
$traidin-2x-offset-y: -84px;
$traidin-2x-width: 34px;
$traidin-2x-height: 26px;
$traidin-2x-total-width: 166px;
$traidin-2x-total-height: 116px;
$traidin-2x-image: '../images/sprite-img@2x.png';
$traidin-2x: (86px, 84px, -86px, -84px, 34px, 26px, 166px, 116px, '../images/sprite-img@2x.png', 'traidin@2x', );
$up-2x-name: 'up@2x';
$up-2x-x: 82px;
$up-2x-y: 0px;
$up-2x-offset-x: -82px;
$up-2x-offset-y: 0px;
$up-2x-width: 50px;
$up-2x-height: 60px;
$up-2x-total-width: 166px;
$up-2x-total-height: 116px;
$up-2x-image: '../images/sprite-img@2x.png';
$up-2x: (82px, 0px, -82px, 0px, 50px, 60px, 166px, 116px, '../images/sprite-img@2x.png', 'up@2x', );
$spritesheet-width: 83px;
$spritesheet-height: 58px;
$spritesheet-image: '../images/sprite-img.png';
$spritesheet-sprites: ($clear, $interest, $payment, $phone, $traidin, $up, );
$spritesheet: (83px, 58px, '../images/sprite-img.png', $spritesheet-sprites, );
$retina-spritesheet-width: 166px;
$retina-spritesheet-height: 116px;
$retina-spritesheet-image: '../images/sprite-img@2x.png';
$retina-spritesheet-sprites: ($clear-2x, $interest-2x, $payment-2x, $phone-2x, $traidin-2x, $up-2x, );
$retina-spritesheet: (166px, 116px, '../images/sprite-img@2x.png', $retina-spritesheet-sprites, );

// These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.
//
// The list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.
$clear-group-name: 'clear';
$clear-group: ('clear', $clear, $clear-2x, );
$interest-group-name: 'interest';
$interest-group: ('interest', $interest, $interest-2x, );
$payment-group-name: 'payment';
$payment-group: ('payment', $payment, $payment-2x, );
$phone-group-name: 'phone';
$phone-group: ('phone', $phone, $phone-2x, );
$traidin-group-name: 'traidin';
$traidin-group: ('traidin', $traidin, $traidin-2x, );
$up-group-name: 'up';
$up-group: ('up', $up, $up-2x, );
$retina-groups: ($clear-group, $interest-group, $payment-group, $phone-group, $traidin-group, $up-group, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite.
//   It should be used with a "retina group" variable.
//
// The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/
//
// $icon-home-group: ('icon-home', $icon-home, $icon-home-2x, );
//
// .icon-home {
//   @include retina-sprite($icon-home-group);
// }
@mixin sprite-background-size($sprite) {
  $sprite-total-width: nth($sprite, 7);
  $sprite-total-height: nth($sprite, 8);
  background-size: $sprite-total-width $sprite-total-height;
}

@mixin retina-sprite($retina-group) {
  $normal-sprite: nth($retina-group, 2);
  $retina-sprite: nth($retina-group, 3);
  @include sprite($normal-sprite);

  @media (-webkit-min-device-pixel-ratio: 2),
         (min-resolution: 192dpi) {
    @include sprite-image($retina-sprite);
    @include sprite-background-size($normal-sprite);
  }
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}

// The `retina-sprites` mixin generates a CSS rule and media query for retina groups
//   This yields the same output as CSS retina template but can be overridden in SCSS
//
// @include retina-sprites($retina-groups);
@mixin retina-sprites($retina-groups) {
  @each $retina-group in $retina-groups {
    $sprite-name: nth($retina-group, 1);
    .#{$sprite-name} {
      @include retina-sprite($retina-group);
    }
  }
}
